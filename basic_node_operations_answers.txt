Questions

1.Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.


sort commands.js returns the file sorted alphabetically by line.

OUTPUT:
         break;
         break;
         commandLibrary.cat(userInputArray.slice(1));
         commandLibrary.echo(userInputArray.slice(1).join(" "));
         done(data);
         if (err) throw err;
        //we will add the functionality of echo next within the object commandLibrary
       case "cat":
       case "echo":
      done(userInput);
     const fileName = fullPath[0];
     fs.readFile(fileName, (err, data) => {
     }
     });
    process.stdout.write('\nprompt > ');
    process.stdout.write(output);
   switch (command) {
  "cat": function(fullPath) {
  "echo": function(userInput) {
  //the cat command
  //the echo command
  const command = userInputArray[0];
  const userInputArray = userInput.split(" ");
  }
  },
 //parses the user input to understand which command was typed
 }
//where we will store our commands
//where we will store the logic of our commands
//write out data
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
}
};






wc commands.js prints newline, word, and byte counts for a file.

OUTPUT:

  43     119    1112 commands.js




uniq commands.js sorts each line in a file and only returns unique lines.
OUTPUT:
const fs = require("fs");

//write out data
function done(output) {
    process.stdout.write(output);
    process.stdout.write('\nprompt > ');
}

//where we will store our commands
function evaluateCmd(userInput) {
 //parses the user input to understand which command was typed
  const userInputArray = userInput.split(" ");
  const command = userInputArray[0];

   switch (command) {
       case "echo":
        //we will add the functionality of echo next within the object commandLibrary
         commandLibrary.echo(userInputArray.slice(1).join(" "));
         break;
       case "cat":
         commandLibrary.cat(userInputArray.slice(1));
         break;
     }
  }

//where we will store the logic of our commands
const commandLibrary = {
  //the echo command
  "echo": function(userInput) {
      done(userInput);
  },
  //the cat command
  "cat": function(fullPath) {
     const fileName = fullPath[0];
     fs.readFile(fileName, (err, data) => {
         if (err) throw err;
         done(data);
     });
 }
};

module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;



2.Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.


echo 'Hi! How are you?' | wc
  1       4      17


Echo is creating the input for the wc command and then wc command is creating an output. So in this case, wc prints newline, word, and byte counts for whatever was included in the echo command.


Questions 3, 4 and 5 answered in commands.js


6.  Reverse string function :


function reverseString(string) {
var s = string.split('');
s.reverse();
var n = s.join('');
return n;
}





